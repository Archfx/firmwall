#!/usr/bin/env python

import angr

p = angr.Project('../binaries/tf-m/psa_crypto/zephyr.elf', load_options={'auto_load_libs': False})
# cfg = p.analyses.CFGFast()
cfg = p.analyses.CFGEmulated(keep_state=True)
print("This is the graph:", cfg.graph)
print("It has %d nodes and %d edges" % (len(cfg.graph.nodes()), len(cfg.graph.edges())))

cdg = p.analyses.CDG(cfg)
ddg = p.analyses.DDG(cfg)

target_func = cfg.kb.functions.function(name="att_test")
# We need the CFGNode instance
target_node = cfg.get_any_node(target_func.addr)

# Let's get a BackwardSlice out of them!
# ``targets`` is a list of objects, where each one is either a CodeLocation
# object, or a tuple of CFGNode instance and a statement ID. Setting statement
# ID to -1 means the very beginning of that CFGNode. A SimProcedure does not
# have any statement, so you should always specify -1 for it.
bs = p.analyses.BackwardSlice(cfg, cdg=cdg, ddg=ddg, targets=[ (target_node, -1) ])

# Here is our awesome program slice!
print(bs)

