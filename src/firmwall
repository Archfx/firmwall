#!/usr/bin/env python

import sys
import claripy
import angr
from angrutils import *
import networkx as nx
import argparse


import re

import csv
import yaml

import os
from termcolor import colored


sys.path.append('/src/spec_mgr')
from spec_mgr import SpecParse, Argument, Output, read_yaml, create_service_spec
from mem_insp import on_mem_read, on_mem_write


import timeout_decorator

import logging
logging.getLogger('angr.analyses').setLevel('ERROR')
logging.getLogger('angr').setLevel('ERROR')

path = ""
elf_file = ""
func_file = ""

def load_spec(yaml_file):
    with open(yaml_file, 'r') as file:
        return yaml.safe_load(file)

def decode_fn_spec(spec_fn, imp_fn):
    if imp_fn in spec_fn:
        function_details = spec_fn[imp_fn]
        inputs = function_details["inputs"]
        return inputs
    else:
        raise ValueError(f"Function '{function_name}' not found in PSA Crypto functions")


def write_functions_csv( functions, save_csv=True):
	functions = []
	# Iterate over functions and collect data
	for func_addr, func in cfg.kb.functions.items():
		functions.append({
			"func_name": func.name,
			"func_addr": hex(func_addr)
		})
	if (save_csv):
		fields = ["func_name", "func_addr"]
		with open(func_file, mode='w', newline='') as file:
			writer = csv.DictWriter(file, fieldnames=fields)
			writer.writeheader()
			for func in functions:
				writer.writerow(func)
	return functions

def save_cfg(project, start_fn, cfg_name):
	main = project.loader.main_object.get_symbol(start_fn)
	start_state = project.factory.blank_state(addr=main.rebased_addr)
	cfg = project.analyses.CFGEmulated(fail_fast=True, starts=[main.rebased_addr], initial_state=start_state)
	plot_cfg(cfg, cfg_name, format="svg", asminst=True, remove_imports=True, remove_path_terminator=True)

# Function to locate the address of psa_sign_hash
def locate_function(cfg, func_name):
    # cfg = project.analyses.CFGFast()
    for func_addr, func in cfg.kb.functions.items():
        if func.name == func_name:
            return func_addr
    return None

def get_subgraphs_to_end_nodes(cfg_graph, end_nodes, x):
    # Reverse the graph
    reversed_cfg = cfg_graph.reverse()

    subgraphs = {}
    for end_node in end_nodes:
        # Perform DFS up to depth x from the end node in the reversed graph
        def limited_dfs(graph, start_node, depth):
            visited = set()
            stack = [(start_node, 0)]
            while stack:
                node, current_depth = stack.pop()
                if node not in visited and current_depth <= depth:
                    visited.add(node)
                    if current_depth < depth:
                        stack.extend((neighbor, current_depth + 1) for neighbor in graph[node])
            return visited

        reachable_nodes = limited_dfs(reversed_cfg, end_node, x)
        
        # Extract the subgraph from the original CFG
        subgraph = cfg_graph.subgraph(reachable_nodes).copy()
        
        subgraphs[end_node] = subgraph

    return subgraphs

# def get_subgraphs_from_start_nodes(cfg_graph, start_nodes, x):
#     subgraphs = {}
#     for start_node in start_nodes:
#         # Perform DFS up to depth x from the start node in the original graph
#         def limited_dfs(graph, start_node, depth):
#             visited = set()
#             stack = [(start_node, 0)]
#             while stack:
#                 node, current_depth = stack.pop()
#                 if node not in visited and current_depth <= depth:
#                     visited.add(node)
#                     if current_depth < depth:
#                         stack.extend((neighbor, current_depth + 1) for neighbor in graph[node])
#             return visited

#         reachable_nodes = limited_dfs(cfg_graph, start_node, x)
        
#         # Extract the subgraph from the original CFG
#         subgraph = cfg_graph.subgraph(reachable_nodes).copy()
        
#         subgraphs[start_node] = subgraph

#     return subgraphs

def get_subgraphs_from_start_nodes(cfg_graph, start_nodes, x):
    subgraphs = []
    for start_node in start_nodes:
        # Perform DFS up to depth x from the start node in the original graph
        def limited_dfs(graph, start_node, depth):
            visited = set()
            stack = [(start_node, 0)]
            while stack:
                node, current_depth = stack.pop()
                if node not in visited and current_depth <= depth:
                    visited.add(node)
                    if current_depth < depth:
                        stack.extend((neighbor, current_depth + 1) for neighbor in graph[node])
            return visited

        reachable_nodes = limited_dfs(cfg_graph, start_node, x)
        
        # Extract the subgraph from the original CFG
        subgraph = cfg_graph.subgraph(reachable_nodes).copy()
        
        subgraphs.append(subgraph)

    return subgraphs

# Function to extract address from the CFGNode string
def extract_address(node_str):
    # Example: "ecdsa_verify_psa+0x74"
    match = re.search(r'\+(0x[0-9a-fA-F]+)', node_str)
    if match:
        return int(match.group(1), 16)
    else:
        raise ValueError("Invalid node string format")

def get_starting_nodes(subgraph):
	starting_nodes = []
	starting_addrs = []
	for node in subgraph.nodes:
		if subgraph.in_degree(node) == 0:  # No predecessors
			starting_nodes.append(node.name)
			starting_addrs.append(node.addr)
	return starting_nodes, starting_addrs

def get_end_nodes(subgraph):
    end_nodes = []
    end_addrs = []
    for node in subgraph.nodes:
        if subgraph.out_degree(node) == 0:  # No successors
            end_nodes.append(node.name)
            end_addrs.append(node.addr)
    return end_nodes, end_addrs

# Define a path constraint to reach the function
# def is_at_function(state):
# 	return state.addr == function_address

# def is_end_address(state):
#     return state.addr == END_ADDRESS


def get_args():
	# Create the parser
	parser = argparse.ArgumentParser(description="Firmware firmware binary analysis tool.")

	parser.add_argument('-p', '--project', type=str, help='Project path')
	# Add arguments
	parser.add_argument('-d', '--dumpfn', action='store_true', help='Dump available functions in the firmware')
	parser.add_argument('-s', '--svg', action='store_true', help='Save the CFG into a SVG')
	# parser.add_argument('-s', '--string', type=str, help='A string to process')
	# parser.add_argument('-l', '--list', nargs='+', help='A list of values')

	# Parse the arguments
	args = parser.parse_args()

	# Use the arguments
	# if args.verbose:
	#     print("Verbose mode enabled")

	return args

def largest_subgraph_containing_node(graph, node):
    # Find all strongly connected components
    sccs = list(nx.strongly_connected_components(graph))
    
    # Find the SCC containing the particular node
    for scc in sccs:
        if node in scc:
            # Create a subgraph with the nodes in the SCC
            subgraph = graph.subgraph(scc).copy()
            return subgraph
    return None

class serviceInfo:
	def __init__(self, starting_nodes, starting_addrs, end_node, subgraph):
		self.starting_nodes = starting_nodes
		self.starting_addrs = starting_addrs
		self.end_node = end_node
		self.subgraph = subgraph

if __name__ == "__main__":
	if len(sys.argv) < 2:
		print("Usage: firmwall <firmware_path>" )
		sys.exit(1)

	attr = get_args()
	path = attr.project
	elf_file = path+"/bin/zephyr.elf"
	res_folder = path + "/res"
	func_file = res_folder+"/functions.csv"
	spec_file = path + '/spec/spec.yml'

	if attr.svg: dump_svg = True
	else: dump_svg = False

	print(colored(f"Loading the project at {path}!", "blue", attrs=["reverse", "bold"]))

	if not os.path.exists(elf_file):
		print(colored(f"Could not find the binary file {elf_file}!", "red", attrs=["reverse", "bold"]))

	if not os.path.exists(spec_file):
		print(colored(f"Could not find the specification file {spec_file}!", "red", attrs=["reverse", "bold"]))


	project = angr.Project(elf_file, load_options={'auto_load_libs': False})

	print(colored(f"Parsing the specification at {spec_file}!", "blue", attrs=["reverse", "bold"]))

	spec_data = read_yaml(spec_file)

	assert spec_data, "Unable to read spec data'"

	# Create SpecParse objects
	service_spec = create_service_spec(	spec_data)

	# CFG for decoding function addresses and creating the subgraphs
	# cfg = project.analyses.CFGFast(show_progressbar=True)
	cfg = project.analyses.CFGEmulated(keep_state=True, show_progressbar=True, state_add_options=angr.sim_options.refs, context_sensitivity_level=2, fail_fast=True)
	if (dump_svg):
		# plot_cfg(cfg, res_folder + "/cfg", format="svg", asminst=True, remove_imports=True, remove_path_terminator=True)
		plot_cfg(cfg, res_folder + "/cfg", format="svg", asminst=True, remove_imports=True, remove_path_terminator=True)
	

	for function_spec in service_spec:
		function_spec.setAddr(locate_function(cfg, function_spec.name))
		print(function_spec)


	for function_spec in service_spec:
		print(colored(f"Processing the function {function_spec.name}!", "blue", attrs=["reverse", "bold"]))
		func_node = cfg.get_any_node(function_spec.address)
		print(func_node)
		subgraphs = get_subgraphs_from_start_nodes(cfg.graph, [func_node], 100)
		print (subgraphs)
		for x in subgraphs:
			# print("Subgraph has %d nodes and %d edges" % (len(x.nodes()), len(x.edges())))
			end_nodes, end_addrs = get_end_nodes(x)

			print (end_nodes)
			
		# Create an initial state
		start_state = project.factory.blank_state(
						addr=function_spec.address, 
						add_options={
							angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,
							angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS,
						},)

		# Set up hooks for memory read and write operations
		start_state.inspect.b('mem_read', when=angr.BP_BEFORE, action=on_mem_read)
		start_state.inspect.b('mem_write', when=angr.BP_BEFORE, action=on_mem_write)

		# Add constraints to the input string
		# for i in range(num_input_chars):
		# 	current_byte = input_str.get_byte(i)
		# 	start_state.solver.add(
		# 		claripy.Or(
		# 			claripy.And(current_byte >= ord('a'), current_byte <= ord('z')),
		# 			claripy.And(current_byte >= ord('A'), current_byte <= ord('Z')),
		# 			claripy.And(current_byte >= ord('0'), current_byte <= ord('9'))
		# 		)
		# 	)

		# # Create a simulation manager
		simgr = project.factory.simulation_manager(start_state)

		# Define the end address function
		def is_end_address(state):
			if state.addr in end_addrs:
				return True
			else: return False

			# return state.addr == project.loader.main_object.get_symbol(x.end_node)
		
		@timeout_decorator.timeout(1000)  # Timeout in seconds
		def explore_with_timeout(simgr):
			simgr.explore(find=is_end_address)
			return simgr
		
		try:
			# Explore the binary to find the end address with a timeout
			simgr = explore_with_timeout(simgr)

			# Check the results
			if simgr.found:
				found_state = simgr.found[0]
				print("End address reached!")
				constraints = found_state.solver.constraints

				for constraint in constraints:
					print(constraint)

		except timeout_decorator.timeout_decorator.TimeoutError:
			print("Symbolic execution timed out.")


# ================