#!/usr/bin/env python

import sys
import claripy
import angr
from angrutils import *
import pickle
import yaml

import csv


# load graph object from file
# G = pickle.load(open('filename.pickle', 'rb'))

if len(sys.argv) < 2:
    print("Usage: script.py <path_to_elf_file> <path_to_res>" )
    sys.exit(1)

elf_file = sys.argv[1]
res_folder = sys.argv[2]

project = angr.Project(elf_file, load_options={'auto_load_libs': False})

cfg = project.analyses.CFGEmulated(keep_state=True)
print("This is the graph:", cfg.graph)
print("It has %d nodes and %d edges" % (len(cfg.graph.nodes()), len(cfg.graph.edges())))

with open(res_folder+"/cfg.gpickle", 'w') as f:
    # pickle.dump(cfg, f, pickle.HIGHEST_PROTOCOL)
    yaml.dump(cfg, f)

functions = []

# Iterate over functions and collect data
for func_addr, func in cfg.kb.functions.items():
    functions.append({
        "func_name": func.name,
        "func_addr": hex(func_addr)
    })

# print("List of functions in the binary:")
# for func_addr, func in cfg.kb.functions.items():
#     print(f"Function name: {func.name}, Address: {hex(func_addr)}")

# CSV file path
csv_file = res_folder+"/functions.csv"
fields = ["func_name", "func_addr"]
with open(csv_file, mode='w', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=fields)
    writer.writeheader()
    for func in functions:
        writer.writerow(func)